//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Experiences = newExperiencesTable("public", "experiences", "")

type experiencesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	UserID    postgres.ColumnString
	Company   postgres.ColumnString
	Role      postgres.ColumnString
	Years     postgres.ColumnInteger
	CreatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExperiencesTable struct {
	experiencesTable

	EXCLUDED experiencesTable
}

// AS creates new ExperiencesTable with assigned alias
func (a ExperiencesTable) AS(alias string) *ExperiencesTable {
	return newExperiencesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExperiencesTable with assigned schema name
func (a ExperiencesTable) FromSchema(schemaName string) *ExperiencesTable {
	return newExperiencesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExperiencesTable with assigned table prefix
func (a ExperiencesTable) WithPrefix(prefix string) *ExperiencesTable {
	return newExperiencesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExperiencesTable with assigned table suffix
func (a ExperiencesTable) WithSuffix(suffix string) *ExperiencesTable {
	return newExperiencesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExperiencesTable(schemaName, tableName, alias string) *ExperiencesTable {
	return &ExperiencesTable{
		experiencesTable: newExperiencesTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newExperiencesTableImpl("", "excluded", ""),
	}
}

func newExperiencesTableImpl(schemaName, tableName, alias string) experiencesTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		UserIDColumn    = postgres.StringColumn("user_id")
		CompanyColumn   = postgres.StringColumn("company")
		RoleColumn      = postgres.StringColumn("role")
		YearsColumn     = postgres.IntegerColumn("years")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, CompanyColumn, RoleColumn, YearsColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, CompanyColumn, RoleColumn, YearsColumn, CreatedAtColumn}
	)

	return experiencesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		Company:   CompanyColumn,
		Role:      RoleColumn,
		Years:     YearsColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
