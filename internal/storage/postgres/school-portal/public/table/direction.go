//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Direction = newDirectionTable("public", "direction", "")

type directionTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	Name        postgres.ColumnString
	Image       postgres.ColumnString
	Description postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DirectionTable struct {
	directionTable

	EXCLUDED directionTable
}

// AS creates new DirectionTable with assigned alias
func (a DirectionTable) AS(alias string) *DirectionTable {
	return newDirectionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DirectionTable with assigned schema name
func (a DirectionTable) FromSchema(schemaName string) *DirectionTable {
	return newDirectionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DirectionTable with assigned table prefix
func (a DirectionTable) WithPrefix(prefix string) *DirectionTable {
	return newDirectionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DirectionTable with assigned table suffix
func (a DirectionTable) WithSuffix(suffix string) *DirectionTable {
	return newDirectionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDirectionTable(schemaName, tableName, alias string) *DirectionTable {
	return &DirectionTable{
		directionTable: newDirectionTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newDirectionTableImpl("", "excluded", ""),
	}
}

func newDirectionTableImpl(schemaName, tableName, alias string) directionTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		NameColumn        = postgres.StringColumn("name")
		ImageColumn       = postgres.StringColumn("image")
		DescriptionColumn = postgres.StringColumn("description")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, ImageColumn, DescriptionColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, ImageColumn, DescriptionColumn, CreatedAtColumn}
	)

	return directionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Image:       ImageColumn,
		Description: DescriptionColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
