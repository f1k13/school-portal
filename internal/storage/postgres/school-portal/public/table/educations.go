//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Educations = newEducationsTable("public", "educations", "")

type educationsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	UserID      postgres.ColumnString
	Institution postgres.ColumnString
	Degree      postgres.ColumnString
	StartYear   postgres.ColumnInteger
	EndYear     postgres.ColumnInteger
	City        postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EducationsTable struct {
	educationsTable

	EXCLUDED educationsTable
}

// AS creates new EducationsTable with assigned alias
func (a EducationsTable) AS(alias string) *EducationsTable {
	return newEducationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EducationsTable with assigned schema name
func (a EducationsTable) FromSchema(schemaName string) *EducationsTable {
	return newEducationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EducationsTable with assigned table prefix
func (a EducationsTable) WithPrefix(prefix string) *EducationsTable {
	return newEducationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EducationsTable with assigned table suffix
func (a EducationsTable) WithSuffix(suffix string) *EducationsTable {
	return newEducationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEducationsTable(schemaName, tableName, alias string) *EducationsTable {
	return &EducationsTable{
		educationsTable: newEducationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newEducationsTableImpl("", "excluded", ""),
	}
}

func newEducationsTableImpl(schemaName, tableName, alias string) educationsTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		UserIDColumn      = postgres.StringColumn("user_id")
		InstitutionColumn = postgres.StringColumn("institution")
		DegreeColumn      = postgres.StringColumn("degree")
		StartYearColumn   = postgres.IntegerColumn("start_year")
		EndYearColumn     = postgres.IntegerColumn("end_year")
		CityColumn        = postgres.StringColumn("city")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, InstitutionColumn, DegreeColumn, StartYearColumn, EndYearColumn, CityColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, InstitutionColumn, DegreeColumn, StartYearColumn, EndYearColumn, CityColumn, CreatedAtColumn}
	)

	return educationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		Institution: InstitutionColumn,
		Degree:      DegreeColumn,
		StartYear:   StartYearColumn,
		EndYear:     EndYearColumn,
		City:        CityColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
