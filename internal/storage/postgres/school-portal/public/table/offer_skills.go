//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OfferSkills = newOfferSkillsTable("public", "offer_skills", "")

type offerSkillsTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnString
	OfferID postgres.ColumnString
	SkillID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OfferSkillsTable struct {
	offerSkillsTable

	EXCLUDED offerSkillsTable
}

// AS creates new OfferSkillsTable with assigned alias
func (a OfferSkillsTable) AS(alias string) *OfferSkillsTable {
	return newOfferSkillsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OfferSkillsTable with assigned schema name
func (a OfferSkillsTable) FromSchema(schemaName string) *OfferSkillsTable {
	return newOfferSkillsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OfferSkillsTable with assigned table prefix
func (a OfferSkillsTable) WithPrefix(prefix string) *OfferSkillsTable {
	return newOfferSkillsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OfferSkillsTable with assigned table suffix
func (a OfferSkillsTable) WithSuffix(suffix string) *OfferSkillsTable {
	return newOfferSkillsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOfferSkillsTable(schemaName, tableName, alias string) *OfferSkillsTable {
	return &OfferSkillsTable{
		offerSkillsTable: newOfferSkillsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newOfferSkillsTableImpl("", "excluded", ""),
	}
}

func newOfferSkillsTableImpl(schemaName, tableName, alias string) offerSkillsTable {
	var (
		IDColumn       = postgres.StringColumn("id")
		OfferIDColumn  = postgres.StringColumn("offer_id")
		SkillIDColumn  = postgres.StringColumn("skill_id")
		allColumns     = postgres.ColumnList{IDColumn, OfferIDColumn, SkillIDColumn}
		mutableColumns = postgres.ColumnList{OfferIDColumn, SkillIDColumn}
	)

	return offerSkillsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		OfferID: OfferIDColumn,
		SkillID: SkillIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
