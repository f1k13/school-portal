//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OfferEducations = newOfferEducationsTable("public", "offer_educations", "")

type offerEducationsTable struct {
	postgres.Table

	// Columns
	OfferID     postgres.ColumnString
	EducationID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OfferEducationsTable struct {
	offerEducationsTable

	EXCLUDED offerEducationsTable
}

// AS creates new OfferEducationsTable with assigned alias
func (a OfferEducationsTable) AS(alias string) *OfferEducationsTable {
	return newOfferEducationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OfferEducationsTable with assigned schema name
func (a OfferEducationsTable) FromSchema(schemaName string) *OfferEducationsTable {
	return newOfferEducationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OfferEducationsTable with assigned table prefix
func (a OfferEducationsTable) WithPrefix(prefix string) *OfferEducationsTable {
	return newOfferEducationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OfferEducationsTable with assigned table suffix
func (a OfferEducationsTable) WithSuffix(suffix string) *OfferEducationsTable {
	return newOfferEducationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOfferEducationsTable(schemaName, tableName, alias string) *OfferEducationsTable {
	return &OfferEducationsTable{
		offerEducationsTable: newOfferEducationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:             newOfferEducationsTableImpl("", "excluded", ""),
	}
}

func newOfferEducationsTableImpl(schemaName, tableName, alias string) offerEducationsTable {
	var (
		OfferIDColumn     = postgres.StringColumn("offer_id")
		EducationIDColumn = postgres.StringColumn("education_id")
		allColumns        = postgres.ColumnList{OfferIDColumn, EducationIDColumn}
		mutableColumns    = postgres.ColumnList{}
	)

	return offerEducationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		OfferID:     OfferIDColumn,
		EducationID: EducationIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
