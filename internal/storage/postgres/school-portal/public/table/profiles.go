//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Profiles = newProfilesTable("public", "profiles", "")

type profilesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnString
	UserID      postgres.ColumnString
	FirstName   postgres.ColumnString
	LastName    postgres.ColumnString
	PhoneNumber postgres.ColumnString
	AvatarURL   postgres.ColumnString
	Dob         postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProfilesTable struct {
	profilesTable

	EXCLUDED profilesTable
}

// AS creates new ProfilesTable with assigned alias
func (a ProfilesTable) AS(alias string) *ProfilesTable {
	return newProfilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProfilesTable with assigned schema name
func (a ProfilesTable) FromSchema(schemaName string) *ProfilesTable {
	return newProfilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProfilesTable with assigned table prefix
func (a ProfilesTable) WithPrefix(prefix string) *ProfilesTable {
	return newProfilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProfilesTable with assigned table suffix
func (a ProfilesTable) WithSuffix(suffix string) *ProfilesTable {
	return newProfilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProfilesTable(schemaName, tableName, alias string) *ProfilesTable {
	return &ProfilesTable{
		profilesTable: newProfilesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newProfilesTableImpl("", "excluded", ""),
	}
}

func newProfilesTableImpl(schemaName, tableName, alias string) profilesTable {
	var (
		IDColumn          = postgres.StringColumn("id")
		UserIDColumn      = postgres.StringColumn("user_id")
		FirstNameColumn   = postgres.StringColumn("first_name")
		LastNameColumn    = postgres.StringColumn("last_name")
		PhoneNumberColumn = postgres.StringColumn("phone_number")
		AvatarURLColumn   = postgres.StringColumn("avatar_url")
		DobColumn         = postgres.StringColumn("dob")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, FirstNameColumn, LastNameColumn, PhoneNumberColumn, AvatarURLColumn, DobColumn, CreatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, FirstNameColumn, LastNameColumn, PhoneNumberColumn, AvatarURLColumn, DobColumn, CreatedAtColumn}
	)

	return profilesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		FirstName:   FirstNameColumn,
		LastName:    LastNameColumn,
		PhoneNumber: PhoneNumberColumn,
		AvatarURL:   AvatarURLColumn,
		Dob:         DobColumn,
		CreatedAt:   CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
