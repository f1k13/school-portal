//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OfferExperiences = newOfferExperiencesTable("public", "offer_experiences", "")

type offerExperiencesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	OfferID      postgres.ColumnString
	ExperienceID postgres.ColumnString
	UserID       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OfferExperiencesTable struct {
	offerExperiencesTable

	EXCLUDED offerExperiencesTable
}

// AS creates new OfferExperiencesTable with assigned alias
func (a OfferExperiencesTable) AS(alias string) *OfferExperiencesTable {
	return newOfferExperiencesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OfferExperiencesTable with assigned schema name
func (a OfferExperiencesTable) FromSchema(schemaName string) *OfferExperiencesTable {
	return newOfferExperiencesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OfferExperiencesTable with assigned table prefix
func (a OfferExperiencesTable) WithPrefix(prefix string) *OfferExperiencesTable {
	return newOfferExperiencesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OfferExperiencesTable with assigned table suffix
func (a OfferExperiencesTable) WithSuffix(suffix string) *OfferExperiencesTable {
	return newOfferExperiencesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOfferExperiencesTable(schemaName, tableName, alias string) *OfferExperiencesTable {
	return &OfferExperiencesTable{
		offerExperiencesTable: newOfferExperiencesTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newOfferExperiencesTableImpl("", "excluded", ""),
	}
}

func newOfferExperiencesTableImpl(schemaName, tableName, alias string) offerExperiencesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		OfferIDColumn      = postgres.StringColumn("offer_id")
		ExperienceIDColumn = postgres.StringColumn("experience_id")
		UserIDColumn       = postgres.StringColumn("user_id")
		allColumns         = postgres.ColumnList{IDColumn, OfferIDColumn, ExperienceIDColumn, UserIDColumn}
		mutableColumns     = postgres.ColumnList{OfferIDColumn, ExperienceIDColumn, UserIDColumn}
	)

	return offerExperiencesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		OfferID:      OfferIDColumn,
		ExperienceID: ExperienceIDColumn,
		UserID:       UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
